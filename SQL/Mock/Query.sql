/* 1. Orders with user first name 'Marion' */
SELECT ORDER_ID, USER_ID, STORE_ID FROM ORDERS
WHERE USER_ID = (SELECT USER_ID FROM USERS WHERE FIRST_NAME = 'Marion');

/* 2. Users with no order */
SELECT USERS.USER_ID, FIRST_NAME, LAST_NAME, CITY FROM USERS
LEFT JOIN ORDERS ON USERS.USER_ID = ORDERS.USER_ID
WHERE ORDERS.ORDER_ID IS NULL;

/* 3. Item names and price of 2 or more separate orders */
SELECT I.NAME, I.PRICE FROM ITEMS I
JOIN ORDER_ITEMS OI ON I.ITEM_ID = OI.ITEM_ID
GROUP BY I.NAME HAVING COUNT(NAME) >= 2;

/* 4. Order_ID, Item name, Item Price, Item Quantity, in NY stores */
SELECT OI.ORDER_ID, I.NAME, I.PRICE, OI.QUANTITY FROM ITEMS I
JOIN ORDER_ITEMS OI ON I.ITEM_ID = OI.ITEM_ID
JOIN ORDERS O ON OI.ORDER_ID = O.ORDER_ID
JOIN STORES S ON O.STORE_ID = S.STORE_ID
WHERE S.CITY = 'New York'
ORDER BY OI.ORDER_ID ASC;

/* 5. ITEM_NAME, REVENUE from all orders */
SELECT I.NAME AS ITEM_NAME, SUM(I.PRICE * OI.QUANTITY) AS REVENUE FROM ITEMS I
JOIN ORDER_ITEMS OI ON I.ITEM_ID = OI.ITEM_ID
GROUP BY I.NAME
ORDER BY REVENUE DESC;

/* 6. Store name, ORDER_QUANTITY, SALES_FIGURE */
SELECT S.NAME AS NAME, COUNT(O.ORDER_ID) AS ORDER_QUANTITY,
CASE WHEN COUNT(O.ORDER_ID) > 3 THEN 'High'
WHEN COUNT(O.ORDER_ID) BETWEEN 2 AND 3 THEN 'Medium'
ELSE 'Low'
END AS SALES_FIGURE
FROM STORES S JOIN ORDERS O ON S.STORE_ID = O.STORE_ID
GROUP BY NAME
ORDER BY COUNT(O.ORDER_ID) DESC;